services:
  - type: web
    name: chemfetch-backend
    env: node
    buildCommand: npm install && npm run build
    startCommand: npm start
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
      - key: OCR_SERVICE_URL
        fromService:
          name: chemfetch-ocr-lightweight
          type: pserv
          property: host

  - type: pserv
    name: chemfetch-ocr-lightweight
    env: python
    pythonVersion: 3.11.9 # Pinned Python version for stability
    # Use ultra-lightweight requirements for memory optimization
    buildCommand: cd ocr_service && pip install -r requirements.txt
    startCommand: cd ocr_service && gunicorn ocr_service:app --workers=1 --threads=2 --timeout=120 --preload=false -b 0.0.0.0:5001
    plan: free # Now fits within 512MB limit!
    envVars:
      - key: PORT
        value: 5001
      - key: OCR_MODE
        value: text-only
      - key: PYTHONUNBUFFERED
        value: '1'
      - key: DEBUG_IMAGES
        value: '0'
    # Removed disk mount - use temporary directories for Render Free compatibility
    healthCheckPath: /health
# Optional: Keep original OCR service as backup/paid tier
# Uncomment if you want both lightweight and full OCR versions
#
#   - type: pserv
#     name: chemfetch-ocr-full
#     env: python
#     pythonVersion: 3.11.9
#     buildCommand: cd ocr_service && pip install -r requirements.txt
#     startCommand: cd ocr_service && python ocr_service.py
#     plan: starter  # Paid plan for full OCR capabilities
#     envVars:
#       - key: PORT
#         value: 5002
#       - key: OCR_MODE
#         value: full
#       - key: PYTHONUNBUFFERED
#         value: "1"
#       - key: DEBUG_IMAGES
#         value: "0"
#     disk:
#       name: ocr-storage-full
#       mountPath: /app/debug_images
#       sizeGB: 1
